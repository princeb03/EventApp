{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","responseBody","response","interceptors","request","use","config","token","store","commonStore","headers","Authorization","a","JSON","parse","error","status","hasOwnProperty","toast","title","method","errors","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Accounts","getCurrent","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","updateProfile","profile","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","runInAction","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadUserActivities","loadProfile","setDisplayName","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","UserStore","userForm","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","err","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","PopupContent","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","basic","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","FormField","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","padding","className","autoComplete","placeholder","type","render","ValidationErrors","Message","MessageList","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","selected","useHistory","useParams","setFormData","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","postion","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","NotFound","Inline","primary","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","cropper","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","theme","ModalContainer","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.40c11c71.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageSize;\r\n    pageNumber;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageSize = pageSize;\r\n        this.pageNumber = pageNumber;\r\n    }\r\n\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst responseBody = <T>(response : AxiosResponse<T>) => response.data;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers[\"pagination\"];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response; \r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (!data.hasOwnProperty('errors')) {\r\n                toast.error(data.title);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) modalStateErrors.push(data.errors[key]);\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error(data.title);\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n}\r\n);\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n};\r\n\r\nconst Accounts = {\r\n    getCurrent: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n};\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        });\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n};\r\n\r\nconst agent = {\r\n    Activities,\r\n    Accounts,\r\n    Profiles\r\n};\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    attendees: Profile[];\r\n    isHost: boolean;\r\n    host?: Profile;\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}\r\n\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();  // possible change from array of activities to Map of activities.\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all',true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            });\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate'); // delete insead of set so that change can be detected\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a,b)=> a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(this.activitiesByDate.reduce((activities, activity) => {\r\n            const date: string = format(activity.date!, 'dd MMM yyyy');\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n            return activities;\r\n        }, {} as {[key: string]: Activity[]}));\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });          \r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        this.loadingInitial = true;\r\n        try {\r\n            activity = await agent.Activities.details(id);\r\n            this.setActivity(activity!);    // CHECK\r\n            this.selectedActivity = activity;\r\n            this.setLoadingInitial(false);\r\n            return activity;\r\n        } catch(error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            );\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }                \r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(\r\n                        a => a.username !== user?.username\r\n                    );\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n        } finally {\r\n            runInAction(() => this.loading=false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n};","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadProfile = async (username:string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    } \r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo:Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch(err) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch(err) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username\r\n                    && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch(err) {\r\n            console.log(err);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    \r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (userForm: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Accounts.login(userForm);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    register = async (userForm: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Accounts.register(userForm);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Accounts.getCurrent();\r\n            runInAction(() => this.user = user);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image;      \r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport ServerError from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        // if (token) window.localStorage.setItem('jwt', token);\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + `?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(err => console.log(\"Error establishing the connection: \" + err));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    });\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(err => console.log(\"Error stopping connection: \" + err));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Menu, Container, Button, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: { user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to=\"/\" exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{\r\n                        marginRight: '10px'\r\n                    }}/>\r\n                    Prince's Event App\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to=\"/activities\" name='Activities' />\r\n                {/* <Menu.Item as={NavLink} to=\"/errors\" name='Errors' /> */}\r\n                <Menu.Item as={NavLink} to=\"/createActivity\" >\r\n                    <Button positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top right' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item \r\n                                as={Link} \r\n                                to={`/profiles/${user?.username}`}\r\n                                text='My Profile'\r\n                                icon='user' />\r\n                            <Dropdown.Item\r\n                                onClick={logout}\r\n                                text='Logout'\r\n                                icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\"\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\"\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size='large' style={{width:'100%', marginTop:'30px'}} >\r\n                <Header icon='filter' attached color='teal' content='Filters'/>\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                    />\r\n                <Menu.Item \r\n                    content=\"I'm Going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm Hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                    />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </Fragment>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\"\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following': 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={e => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile} : Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0,37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    );\r\n}\r\n)","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup, PopupContent } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    };\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup \r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular src={attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null }\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <PopupContent>\r\n                        <ProfileCard profile={attendee} />\r\n                    </PopupContent>\r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n        \r\n    )\r\n});","import { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top'\r\n                        color='red'\r\n                        content='Cancelled'\r\n                        style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image \r\n                            style={{marginBottom:3}}\r\n                            size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are going to ths activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy hh:mm aa') }\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to={`/activities/${activity.id}`} content='View' color='teal' floated='right' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            {groupedActivities.map(([group, activities]) => {\r\n                return (\r\n                    <Fragment key={group}>\r\n                        <Header sub color='teal'>{group}</Header>\r\n                        {\r\n                            activities.map(activity => (\r\n                                <ActivityListItem key={activity.id} activity={activity} />\r\n                            ))\r\n                        }  \r\n                    </Fragment>\r\n                );\r\n            })}\r\n\r\n            \r\n        </Fragment>\r\n        \r\n    )\r\n});","import { Fragment } from \"react\"\r\nimport { Button, Placeholder, Segment } from \"semantic-ui-react\"\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{marginTop: 25}}>\r\n                <Segment.Group>\r\n                    <Segment style={{minHeight:110}}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{minHeight:70}} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>            \r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment, useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [loadActivities, activityRegistry.size]);\r\n\r\n    // if (activityStore.loadingInitial && !loadingNext) return <LoadingComponent content=\"Loading Activities\" />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <Fragment>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </Fragment>\r\n                ): (\r\n                    <InfiniteScroll \r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n            \r\n        </Grid>\r\n    );\r\n});","\r\nimport { useField } from \"formik\";\r\nimport { FormField, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <FormField error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </FormField>\r\n    );\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{email:'', password:'', error: null}}\r\n            onSubmit={(values, {setErrors})=> (\r\n                userStore.login(values).catch(errors => setErrors({error: \"Invalid email/password\"})))\r\n            }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form style={{padding: '2em'}} className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to the App' color='teal' />\r\n                    <MyTextInput name=\"email\" placeholder=\"E-mail\"/>\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage name='error' render={() => \r\n                        (<Label style={{marginBottom: 10}} basic color='red' content={errors.error} />)}\r\n                        />\r\n                    <Button loading={isSubmitting} positive fluid content=\"Login\" type=\"submit\" />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});","import { Message, MessageList } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <MessageList>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </MessageList>\r\n            )}\r\n        </Message>\r\n    );\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header} from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n        username: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required()\r\n    });\r\n    return (\r\n        <Formik \r\n            initialValues={{email:'', password:'', displayName:'', username:'', error: null}}\r\n            onSubmit={(values, {setErrors})=> (\r\n                userStore.register(values).catch(error => setErrors({error})))\r\n            }\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form style={{padding: '2em'}} className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to the App' color='teal' />\r\n                    <MyTextInput name=\"email\" placeholder=\"E-mail\"/>\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                    <MyTextInput name=\"username\" placeholder=\"Username\" />\r\n                    <ErrorMessage name='error' render={() => \r\n                        (<ValidationErrors errors={errors.error}/>)}\r\n                        />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive fluid content=\"Register\" type=\"submit\" />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore,modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Event App\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn ? \r\n                    <Fragment>\r\n                        <Header as='h2' inverted content='Welcome to this app' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Take me to the Activities!\r\n                        </Button>\r\n                    </Fragment> :\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content='Welcome to this app' />\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} inverted>\r\n                            Register\r\n                        </Button>\r\n                    </Fragment>\r\n                }\r\n                \r\n            </Container>\r\n        </Segment>\r\n    );\r\n});","import { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted? : boolean;\r\n    content? : string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content='Loading'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}></Loader>\r\n        </Dimmer>\r\n    );\r\n};","import { useField } from \"formik\";\r\nimport { FormField, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    label?: string;\r\n    rows: number;\r\n}\r\n\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <FormField error={meta.touched && meta.error}>\r\n            <textarea {...field} {...props} />\r\n            {\r\n                meta.touched && meta.error ? \r\n                (<Label basic color='red'>{meta.error}</Label>) : null\r\n            }\r\n        </FormField>\r\n    );\r\n}","import { useField } from \"formik\";\r\nimport { FormField, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <FormField error={meta.touched && meta.error}>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value}\r\n                onChange={(e,d)=> helpers.setValue(d.value)}\r\n                onBlur={()=> helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {\r\n                meta.touched && meta.error ? \r\n                (<Label basic color='red'>{meta.error}</Label>) : null\r\n            }\r\n        </FormField>\r\n    );\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n];","import { useField } from 'formik';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\nimport { FormField, Label } from 'semantic-ui-react';\r\n\r\n\r\nexport default function MyTextArea(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <FormField error={meta.touched && meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {\r\n                meta.touched && meta.error ? \r\n                (<Label basic color='red'>{meta.error}</Label>) : null\r\n            }\r\n        </FormField>\r\n    );\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {loadActivity, createActivity, updateActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [formData, setFormData] = useState<ActivityFormValues>(new ActivityFormValues()); \r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required.'),\r\n        description: Yup.string().required('The activity description is required.'),\r\n        category: Yup.string().required('The activity category is required.'),\r\n        date: Yup.string().required('The activity date is required.').nullable(),\r\n        city: Yup.string().required('The activity city is required.'),\r\n        venue: Yup.string().required('The activity venue is required.')\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setFormData(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (activity.id) {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`)) \r\n        } else {\r\n            let newActivity = {...activity, id: uuid()};\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading Activity' />\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik validationSchema={validationSchema} enableReinitialize initialValues={formData} onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea name='description'placeholder='Description' rows={3}/>\r\n                        <MySelectInput options={categoryOptions} name='category' placeholder='Category'/>\r\n                        <MyDateInput \r\n                            name='date' \r\n                            placeholderText='Date'\r\n                            showTimeSelect\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput name='city' placeholder='City'/>\r\n                        <MyTextInput name='venue' placeholder='Venue'/>\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n            \r\n        </Segment>\r\n    )\r\n});","import { Formik, Form, Field, FieldProps } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Fragment, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header, Segment, Comment, Loader } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from \"date-fns\";\r\n\r\ninterface Props {\r\n    activityId: string;\r\n\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) => \r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{body:''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className=\"ui form\">\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position:'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n\r\n                                            }} />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: \"pre-wrap\"}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                    \r\n                    \r\n\r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n});","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Image, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{postion: 'absolute', zIndex:1000, left:-14, top:20}}\r\n                        ribbon\r\n                        color='red'\r\n                        content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header \r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong></p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <Fragment>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading} />\r\n                        <Button \r\n                            disabled={activity.isCancelled}\r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>Manage Event</Button>\r\n                        \r\n                    </Fragment>\r\n                ): activity.isGoing ? (\r\n                    <Button \r\n                        loading={loading} \r\n                        onClick={updateAttendance} >Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        disabled={activity.isCancelled}\r\n                        loading={loading} \r\n                        onClick={updateAttendance} \r\n                        color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n});","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Grid, Icon, Segment } from \"semantic-ui-react\";\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width='1'>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width='15'>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width='1'>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width='15'>\r\n                        <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width='1'>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width='11'>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n});\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Item, Label, List, Segment, Image } from \"semantic-ui-react\";\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\nexport default observer(function ActivityDetailedSidebar({activity: {attendees,host}}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{border: 'none'}}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{position:'relative'}}>\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{position: 'absolute'}}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{color: 'orange'}}>Following</Item.Extra>\r\n                                }\r\n                                \r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                \r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent content=\"Loading Activity\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n});","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContiner() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal \r\n            open={modalStore.modal.open} \r\n            onClose={modalStore.closeModal}\r\n            size='mini'\r\n        >\r\n            {modalStore.modal.body}\r\n        </Modal>\r\n    );\r\n});","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                    <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card \r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}} />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}`\r\n                            : `People ${profile?.displayName} follows`} \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username}\r\n                                profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width:'100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={setCropper}\r\n        />\r\n    )\r\n}","import {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles} : Props) {\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  };\r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  };\r\n  \r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles]);\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import { Fragment, useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal'\r\n                    content='Step 1 - Add Photo' \r\n                    sub/>\r\n                    <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal'\r\n                    content='Step 2 - Resize image' \r\n                    sub/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal'\r\n                    content='Step 3 - Preview and Upload' \r\n                    sub/>\r\n                {files && files.length > 0 && \r\n                <Fragment>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: \"hidden\"}} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </Fragment> \r\n                }\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}","import { observer } from \"mobx-react-lite\"\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile} : Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, \r\n        uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        console.log(photo);\r\n        console.log(e.currentTarget.name);\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n    \r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                <Header floated='left' icon='image' content='Photos' />\r\n                {\r\n                    isCurrentUser && (\r\n                        <Button floated='right'\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick = {() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )\r\n                }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ): (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {\r\n                                profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    name={photo.id}\r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))\r\n                            }\r\n                            \r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n            \r\n            \r\n        </Tab.Pane>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\"\r\nimport { Tab } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../app/models/profile\"\r\nimport { useStore } from \"../../app/stores/store\"\r\nimport ProfileAbout from \"./ProfileAbout\"\r\nimport ProfileActivities from \"./ProfileActivities\"\r\nimport ProfileFollowings from \"./ProfileFollowings\"\r\nimport ProfilePhotos from \"./ProfilePhotos\"\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About', render:() => <ProfileAbout />},\r\n        {menuItem: 'Photos', render:() => <ProfilePhotos profile={profile}/>},\r\n        {menuItem: 'Events', render:() => <ProfileActivities />},\r\n        {menuItem: 'Followers', render:() => <ProfileFollowings />},\r\n        {menuItem: 'Following', render:() => <ProfileFollowings />},\r\n    ];\r\n    return (\r\n        <Tab    \r\n            menu={{fluid: true, vertical:true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment, useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n    \r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return (() => setActiveTab(0));\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading Profile' />\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && \r\n                <Fragment>\r\n                    <ProfileHeader profile={profile}/>\r\n                    <ProfileContent profile={profile}/>\r\n                </Fragment>\r\n                }\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn }} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    );\r\n}","import { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <Fragment>\n      <ToastContainer position=\"bottom-right\" hideProgressBar theme=\"colored\" />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar/>\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n              <PrivateRoute key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm} />\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n              {/* <PrivateRoute path='/errors' component={TestErrors} /> */}\n              {/* <Route path='/server-error' component={ServerError} /> */}\n              <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import ReactDOM from 'react-dom';\n\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport { StoreContext, store } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}